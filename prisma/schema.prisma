// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Blog {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  slug          String    @unique
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      Int
  categories    String[]  @default([])
  featuredImage String
  author        User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId, slug])
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  image              String?
  createdAt          DateTime             @default(now())
  emailNotifications Boolean              @default(true)
  ipaddress          String?
  loggedInAt         DateTime?            @default(now())
  password           String?
  role               String               @default("1")
  updatedAt          DateTime?            @updatedAt
  blog               Blog[]
  passwordResetToken PasswordResetToken[]
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}